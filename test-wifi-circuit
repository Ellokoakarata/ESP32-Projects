#include <WiFi.h>
#include <WebServer.h>
#include <Stepper.h>
#include <ESP32Servo.h> // Biblioteca para el control del servo en el ESP32

const char* ssid = "";
const char* password = "";

WebServer server(80);

// Pines del motor paso a paso
const int motorPin1 = 27;
const int motorPin2 = 26;
const int motorPin3 = 25;
const int motorPin4 = 33;

// Pines de los LEDs
const int ledPin1 = 13;
const int ledPin2 = 12;
const int ledPin3 = 14;

// Configuración del motor paso a paso
const int pasosPorRevolucion = 2048;
Stepper motor(pasosPorRevolucion, motorPin1, motorPin3, motorPin2, motorPin4);

// Configuración del servo-motor
Servo servo;
const int servoPin = 32; // Cambia a GPIO 32 o 33 para el pin de control del servo
int servoPos = 90;       // Posición inicial del servo (90 grados)

bool secuenciaActiva = false;   // Variable para controlar la secuencia de LEDs
bool motorActivo = false;       // Variable para controlar el giro continuo del motor
int velocidadMotor = 10;        // Velocidad inicial del motor en RPM

unsigned long tiempoAnteriorLed = 0;
unsigned long intervaloLed = 500; // Intervalo para cambiar el estado de los LEDs
int estadoLed = 0;

void setup() {
  Serial.begin(115200);

  // Conectar a la red WiFi
  Serial.print("Conectando a WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConexión WiFi exitosa.");
  Serial.println(WiFi.localIP());

  // Configuración de LEDs
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(ledPin3, OUTPUT);

  // Configuración del motor paso a paso
  motor.setSpeed(velocidadMotor);

  // Configuración del servo
  servo.attach(servoPin);
  servo.write(servoPos); // Inicializa el servo en posición 90 grados

  // Configuración del servidor web
  server.on("/", []() {
    server.send(200, "text/html", "<h1>Control de LEDs, Motor Paso a Paso y Servo</h1>"
      "<p><a href=\"/encender1\">Encender LED 1</a> | <a href=\"/apagar1\">Apagar LED 1</a></p>"
      "<p><a href=\"/encender2\">Encender LED 2</a> | <a href=\"/apagar2\">Apagar LED 2</a></p>"
      "<p><a href=\"/encender3\">Encender LED 3</a> | <a href=\"/apagar3\">Apagar LED 3</a></p>"
      "<p><a href=\"/secuencia\">Iniciar Secuencia de LEDs</a> | <a href=\"/detener_secuencia\">Detener Secuencia</a></p>"
      "<p><a href=\"/mover_motor\">Mover Motor Paso a Paso</a> | <a href=\"/parar_motor\">Parar Motor</a></p>"
      "<p><a href=\"/velocidad/5\">Velocidad Motor: 5 RPM</a> | <a href=\"/velocidad/10\">10 RPM</a> | <a href=\"/velocidad/15\">15 RPM</a></p>"
      "<p><a href=\"/mover_servo\">Mover Servo a 180°</a> | <a href=\"/reset_servo\">Restablecer Servo a 90°</a></p>");
  });

  // Control de LEDs individual
  server.on("/encender1", []() {
    digitalWrite(ledPin1, HIGH);
    server.send(200, "text/html", "<h1>LED 1 Encendido</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/apagar1", []() {
    digitalWrite(ledPin1, LOW);
    server.send(200, "text/html", "<h1>LED 1 Apagado</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/encender2", []() {
    digitalWrite(ledPin2, HIGH);
    server.send(200, "text/html", "<h1>LED 2 Encendido</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/apagar2", []() {
    digitalWrite(ledPin2, LOW);
    server.send(200, "text/html", "<h1>LED 2 Apagado</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/encender3", []() {
    digitalWrite(ledPin3, HIGH);
    server.send(200, "text/html", "<h1>LED 3 Encendido</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/apagar3", []() {
    digitalWrite(ledPin3, LOW);
    server.send(200, "text/html", "<h1>LED 3 Apagado</h1><p><a href=\"/\">Regresar</a></p>");
  });

  // Secuencia de LEDs
  server.on("/secuencia", []() {
    secuenciaActiva = true;
    server.send(200, "text/html", "<h1>Secuencia de LEDs Iniciada</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/detener_secuencia", []() {
    secuenciaActiva = false;
    digitalWrite(ledPin1, LOW);
    digitalWrite(ledPin2, LOW);
    digitalWrite(ledPin3, LOW);
    server.send(200, "text/html", "<h1>Secuencia de LEDs Detenida</h1><p><a href=\"/\">Regresar</a></p>");
  });

  // Movimiento continuo del motor
  server.on("/mover_motor", []() {
    motorActivo = true;
    server.send(200, "text/html", "<h1>Motor Paso a Paso Moviéndose</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/parar_motor", []() {
    motorActivo = false;
    server.send(200, "text/html", "<h1>Motor Paso a Paso Detenido</h1><p><a href=\"/\">Regresar</a></p>");
  });

  // Ajuste de velocidad del motor
  server.on("/velocidad/5", []() {
    velocidadMotor = 5;
    motor.setSpeed(velocidadMotor);
    server.send(200, "text/html", "<h1>Velocidad del Motor ajustada a 5 RPM</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/velocidad/10", []() {
    velocidadMotor = 10;
    motor.setSpeed(velocidadMotor);
    server.send(200, "text/html", "<h1>Velocidad del Motor ajustada a 10 RPM</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/velocidad/15", []() {
    velocidadMotor = 15;
    motor.setSpeed(velocidadMotor);
    server.send(200, "text/html", "<h1>Velocidad del Motor ajustada a 15 RPM</h1><p><a href=\"/\">Regresar</a></p>");
  });

  // Movimiento del servo
  server.on("/mover_servo", []() {
    servo.write(180); // Mueve el servo a 180 grados
    server.send(200, "text/html", "<h1>Servo Movido a 180°</h1><p><a href=\"/\">Regresar</a></p>");
  });
  server.on("/reset_servo", []() {
    servo.write(90); // Regresa el servo a 90 grados
    server.send(200, "text/html", "<h1>Servo Restablecido a 90°</h1><p><a href=\"/\">Regresar</a></p>");
  });

  // Iniciar el servidor
  server.begin();
  Serial.println("Servidor web iniciado.");
}

void loop() {
  server.handleClient();

  // Secuencia de LEDs
  if (secuenciaActiva) {
    unsigned long tiempoActual = millis();
    if (tiempoActual - tiempoAnteriorLed >= intervaloLed) {
      tiempoAnteriorLed = tiempoActual;
      switch (estadoLed) {
        case 0:
          digitalWrite(ledPin1, HIGH);
          estadoLed++;
          break;
        case 1:
          digitalWrite(ledPin2, HIGH);
          estadoLed++;
          break;
        case 2:
          digitalWrite(ledPin3, HIGH);
          estadoLed++;
          break;
        case 3:
          digitalWrite(ledPin1, LOW);
          estadoLed++;
          break;
        case 4:
          digitalWrite(ledPin2, LOW);
          estadoLed++;
          break;
        case 5:
          digitalWrite(ledPin3, LOW);
          estadoLed = 0;
          break;
      }
    }
  }

  // Movimiento continuo del motor
  if (motorActivo) {
    motor.step(10);  // Avanza en pasos de 10 para evitar bloqueos
  }
}

